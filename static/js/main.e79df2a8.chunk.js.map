{"version":3,"sources":["components/assets/images/icon-supervisor.svg","components/assets/images/icon-team-builder.svg","components/assets/images/icon-karma.svg","components/assets/images/icon-calculator.svg","components/Header.js","components/SingleCard.js","components/Card.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Component","SingleCard","this","props","class","title","body","src","img","alt","card","supervisor","team","calc","karma","Card","map","singleCard","index","key","Footer","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,qLCe5BC,G,6KAVP,OACI,gCACI,4DAAqC,wBAAIC,UAAU,UAAd,yBACrC,2J,GANKC,cCcNC,E,uKAVP,OACI,yBAAKF,UAAW,QAAQG,KAAKC,MAAMC,OAC/B,4BAAKF,KAAKC,MAAME,OAChB,2BAAIH,KAAKC,MAAMG,MACf,yBAAKC,IAAKL,KAAKC,MAAMK,IAAKC,IAAI,U,GAPrBT,a,iECOnBU,EAAO,CACT,CAACN,MAAM,aAAcC,MAAM,aAAcC,KAAK,mDAAoDE,IAAIG,KACtG,CAACP,MAAM,YAAaC,MAAM,eAAgBC,KAAK,uEAAwEE,IAAII,KAC3H,CAACR,MAAM,YAAaC,MAAM,aAAcC,KAAK,oEAAqEE,IAAIK,KACtH,CAACT,MAAM,aAAcC,MAAM,QAASC,KAAK,mDAAoDE,IAAIM,MAiBtFC,E,uKAZP,OACI,yBAAKhB,UAAU,aAERW,EAAKM,KAAI,SAACC,EAAWC,GACjB,OAAO,kBAAC,EAAD,iBAAgBD,EAAhB,CAA4BE,IAAKD,a,GAN5ClB,aCFJoB,E,uKAXP,OACI,gCACI,uBAAGhB,MAAM,eAAT,gBACa,uBAAGiB,KAAK,8CAA8CC,OAAO,SAASC,IAAI,uBAA1E,mBADb,cAES,uBAAGF,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBAAxD,mBAFT,U,GAJKvB,aCiBNwB,E,uKAVX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUxB,aCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e79df2a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-supervisor.8f7824b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-team-builder.8a1a6a17.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-karma.ae2dc13d.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-calculator.8e4a5574.svg\";","import React, {Component} from 'react';\r\n\r\nclass Header extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <header>\r\n                <h1>Reliable, efficient delivery</h1><h1 className=\"h1-big\">Powered by Technology</h1>\r\n                <p>Our Artificial Intelligence powered tools use millions of project data points \r\n                    to ensure that your project is successful</p>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React,{Component} from 'react';\r\n\r\n//const cardClass = this.props.class;\r\nclass SingleCard extends Component{\r\n   \r\n    render(){\r\n        return(\r\n            <div className={\"card \"+this.props.class}>\r\n                <h3>{this.props.title}</h3>\r\n                <p>{this.props.body}</p>\r\n                <img src={this.props.img} alt=\"\"/>        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SingleCard;","import React,{ Component } from \"react\";\r\n\r\nimport SingleCard from \"./SingleCard\";\r\n\r\nimport supervisor from './assets/images/icon-supervisor.svg';\r\nimport team from './assets/images/icon-team-builder.svg';\r\nimport karma from './assets/images/icon-karma.svg';\r\nimport calc from './assets/images/icon-calculator.svg';\r\n\r\n\r\nconst card = [\r\n    {class:'card-super', title:'Supervisor', body:'Monitors activity to identify project roadblocks', img:supervisor},\r\n    {class:'card-team', title:'Team Builder', body:'Scans our talent network to create the optimal team for your project', img:team},\r\n    {class:'card-calc', title:'Calculator', body:'Uses data from past projects to provide better delivery estimates', img:calc},\r\n    {class:'card-karma', title:'Karma', body:'Regularly evaluates our talent to ensure quality', img:karma}\r\n]\r\n\r\nclass Card extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n               {\r\n                   card.map((singleCard,index)=>{\r\n                       return <SingleCard {...singleCard} key={index}/>\r\n                   })\r\n               }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","import React,  {Component} from 'react'\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return(\r\n            <footer>\r\n                <p class=\"attribution\">\r\n                Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" target=\"_blank\" rel=\"noopener noreferrer\">Frontend Mentor</a>. \r\n                Coded by <a href=\"witter.com/charlesamakoye\" target=\"_blank\" rel=\"noopener noreferrer\">Charles Amakoye</a>.\r\n                </p>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './css/style.css';\n\nimport Header from './components/Header';\nimport Card from './components/Card';\nimport Footer from './components/Footer';\n\nclass App extends Component{\n  render(){\n    return(\n      <div>\n        <Header/>\n        <Card/>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}